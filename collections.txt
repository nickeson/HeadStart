Collections are also called containers
java.util - has collection interface
maps are part of collections classes but don't extend collections interface
Distinction between Collection (interface) and Collections (class).
Set/List/Map get used all the time
Sets hold single objects.  List can have duplicates, set won't.
Map - key/value pairs.  Key could be a string, value could be a string, object, collection, anything
List order is based on how they were input (assuming they weren't manipulated)
use list, set, map, not arrayList, sortedSet, hashMap
Try to size collections when you create them.  Default is 16.  Try to size appropriately.
Don't have to cast if you specify a type in the declaration
use 'object' if we don't know the data type (more generic)
Interface is more generic - (slide 6, Intro To Prog #3)
Anytime we see 'is', java returns a boolean value
data.toArray(new string[]);
Iterator! = look into this more
maps - value can be any object (array, string, anything).  Can be null
Hash map is standard way of doing it - no specific order.  Generally used for just 'give me a specific value'.
Tree map - puts into natural order (implement comparables)
In collections class we can sort by a comparator (sort a map or list)
Use map.put (not add!).  Use map.get (use key for the value)
Hash map is main map type we'll use (don't care about ordering/looping)
Linked Hash Map maintains order we put it in
Tree Map orders keys (not the order we put them in), i.e., strings get sorted alphabetically
Maps are generally not looped
Collections are one of the few times we use plural (people is a list of person objects) *** PLURALITY DENOTES COLLECTION ***
Serialization allows an object of a class to be represented textually
Do Homework from PPT3 - implement person class as serializable

- Create a Map of states (State code/state name)
- Order and reverse order the data
- Create a List of people (Person Id, First Name, Last Name)
- Shuffle people into a random order
- Convert String[] to list String s = { “one”, ”two" };
